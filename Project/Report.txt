Network Tour of Data Science 
Project Free Music Alternative Playlists
Tim Tuuva, Lucas Biotto, Anael Buchegger, Joachim Tapparel

Introduction
It can be tough to know what we would like to listen when faced with an archive of thousand of musics. For our project we wondered how we could automatically generate a list of songs that would correspond to one's taste. We will explore the features of the Free Music Archive (FMA) to generate a graph that will contain many songs of selected genres. These songs can then be sorted and a playlist be generated out of a region of this graph. We will explore different methods of generating playlists. At the end, 
we will show how this tool can be used to generate a free alternative playlists from non-free musics.


1. Generating the graph
During previous work we found out that using the cosine distance between the nodes of our graph, without normalizing the feature numbers, wasn't the best idea as we couldn't figure out a way to separate even only two genres. For this project we first normalized all the features to a same weight. After trying different distances, the euclidean one seems to give us the best separation. By then using a spring layout (force-based), we can visually distinguish between Rock, Hip-hop, and Folk. The other genres don't seem to be distinguishible by using this graph calculation. More clever use of the features would probably help. For example, by using machine learning, we could tweak the weight of each feature to better separate more genres. 
*PICTURE :D cosine eigengraph vs eulidian spring-graph*

2. Generating a playlist
To generate a playlist we explored three distinct methods. 
First, we select the closest songs around the selected music (node) in the graph. This effectively results in a kind of circle around a point. This type of playlist will thus be very targeted towards a specific kind of song. For this purpose we use the simple euclidean distance in our 2D graph.
Secondly, we can create a playlist directly from the euclidean distance between features. This property should result in similar features, such as rythm, or height of voice of example, but being more adventurous in regards to genres. One could for example end up listening to hip-hop when starting from rock.
Finally, we generate a heat diffusion around selected nodes, and create a playlist from the "warmest" neighbours. This selection should result in a kind of path between different closely connected songs. 
When listening to a playlist, it is nice to be able to tell how adventurous we feel regarding the inclusion of other styles. We thus leave the choice to the user to select its own prefered playlist generation.

3. Including our own songs
We also want to be able to propose, out of a selected personnal song, an alternative playlist, made of free music. One could then find and extract music that should correspond to their taste, for free. By using the given function to extract features of any song, we can then place our song in the free music graph, or locate it between its closest neighbours. We can then proceed as previously to generate a new playlist. By doing so, we can also tell the user which type of music best corresponds to the selected song.
We start by extracting the chosen songs features to relate it to our data set. Trying to place it in relation to our existing graph could be tedious. We first tried including the song at the beginning, and re-generating the adjacency matrix every time. This practice however takes a lot of time. After some research, we found the k-d Tree method, which allows us to directly locate the closest neighbours without having to re-generate the graph or distances. This method uses a clever algorithm to generate a tree, which is then used to rapidly find the closest neighbours. This method drastically improves the localization speed. Having placed our new point in the graph, we can easily apply any of the previoulsy described methods.

Conclusion
By using what we learned during the course and the project milestones, we were able to gain and use some knowledge on graphs and Python to generate awesome playlists, and we hope these will inspire generation of free music listeners. :P


